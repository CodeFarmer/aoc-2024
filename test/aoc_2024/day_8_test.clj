(ns aoc-2024.day-8-test
  (:require [clojure.test :refer :all]
            [aoc-2024.day-8 :refer :all]
            [aoc-2024.core :as aoc]
            [clojure.string :as str]))

(def sample-data
  (str/split 
   "............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"
   #"\n"))


(deftest antinode-finding-test
  (let [example (str/split "..........
...#......
..........
....a.....
..........
.....a....
..........
......#...
..........
..........
"
                           #"\n")
        antennas (aoc/tmap-find-locations example \a)
        antinodes (aoc/tmap-find-locations example \#)]
    (is (= 2 (count antennas)) "sanity check: antinodes")
    (is (= 2 (count antinodes)) "sanity check: antinodes")

    (is (= antinodes (apply find-antinodes antennas)))))

(deftest antinode-group-finding-test
  (let [example (str/split "..........
...#......
#.........
....a.....
........a.
.....a....
..#.......
......#...
..........
..........
"
                           #"\n")
        antennas (aoc/tmap-find-locations example \a)
        antinodes (into #{} (aoc/tmap-find-locations example \#))]
    (is (= 3 (count antennas)) "sanity check: antinodes")
    (is (= 4 (count antinodes)) "sanity check: antinodes")
    
    (is (= antinodes (find-antinode-group example antennas)))))

(deftest antenna-collecting-test
  (is (= [\A \0] (keys (collect-antennae sample-data)))
      "collected antennae should be an assoc with the antenna types as keys")
  (is (= 14 (count (reduce into #{} (vals (collect-antennae sample-data)))))))

(def input-data
  (str/split (slurp "aoc-2024-inputs/input-8.txt")
             #"\n"))

(deftest part-1-test
  (is (= 247 (count (reduce into #{} (vals (collect-antennae input-data)))))))

;; part 2

(deftest resonant-antinode-finding-test
  (let [example (str/split "T.........
...T......
......#...
.........#
..........
..........
..........
..........
..........
.........."
                           #"\n")
        antennae (aoc/tmap-find-locations example \T)
        antinodes (aoc/tmap-find-locations example \#)]

    (is (= (into #{} (concat antinodes antennae))
           (apply (partial find-resonant-antinodes example) antennae)))))

(deftest part-2-test
  (is (= 861 (count (reduce into #{} (vals (collect-antennae input-data (partial find-resonant-antinodes input-data))))))))


